<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/FintechCore.Application/Services/Setups/branch/BranchService.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/FintechCore.Application/Services/Setups/branch/BranchService.cs" />
              <option name="originalContent" value="using AutoMapper;&#10;using FintechCore.Application.Dtos.Setups;&#10;using FintechCore.Domain.Entities.Setups;&#10;using FintechCore.Domain.Interfaces;&#10;using Microsoft.Extensions.Logging;&#10;&#10;namespace FintechCore.Application.Services.Setups.branch;&#10;&#10;public class BranchService : IBranchService&#10;{&#10;    private readonly IUnitOfWork _unitOfWork;&#10;    private readonly ILogger&lt;BranchService&gt; _logger;&#10;    private readonly IMapper _mapper;&#10;&#10;    public BranchService(IUnitOfWork unitOfWork, ILogger&lt;BranchService&gt; logger, IMapper mapper)&#10;    {&#10;        _unitOfWork = unitOfWork;&#10;        _logger = logger;&#10;        _mapper = mapper;&#10;    }&#10;&#10;    public async  Task&lt;IEnumerable&lt;BranchDto&gt;&gt; GetAllBranchesAsync()&#10;    {&#10;        _logger.LogInformation(&quot;Getting all branches&quot;);&#10;        var branches = await _unitOfWork.BranchRepository.GetAll();&#10;        return _mapper.Map&lt;IEnumerable&lt;BranchDto&gt;&gt;(branches);&#10;    }&#10;&#10;    public async Task&lt;BranchDto&gt; GetBranchByIdAsync(int id)&#10;    {&#10;        _logger.LogInformation(&quot;Getting branch with id {Id}&quot;, id);&#10;        var branch = await _unitOfWork.BranchRepository.GetById(id);&#10;        if (branch == null)&#10;        {&#10;            _logger.LogWarning(&quot;Branch with id {Id} not found&quot;, id);&#10;            throw new KeyNotFoundException($&quot;Branch with id {id} not found&quot;);&#10;        }&#10;        return _mapper.Map&lt;BranchDto&gt;(branch);&#10;    }&#10;&#10;    public async Task&lt;BranchDto&gt; CreateBranchAsync(CreateBranchDto dto)&#10;    {&#10;        _logger.LogInformation(&quot;Creating a new branch&quot;);&#10;        var branch = _mapper.Map&lt;Branch&gt;(dto);&#10;        _unitOfWork.BranchRepository.Add(branch);&#10;        await _unitOfWork.CompleteAsync();&#10;        return _mapper.Map&lt;BranchDto&gt;(branch);&#10;    }&#10;&#10;    public async Task&lt;BranchDto&gt; UpdateBranchAsync(int id, UpdateBranchDto dto)&#10;    {&#10;        _logger.LogInformation(&quot;Updating branch with id {Id}&quot;, id);&#10;        var branch = await  _unitOfWork.BranchRepository.GetById(id);&#10;        if (branch == null)&#10;        {&#10;            _logger.LogWarning(&quot;Branch with id {Id} not found&quot;, id);&#10;            throw new KeyNotFoundException($&quot;Branch with id {id} not found&quot;);&#10;        }&#10;            // Map the DTO onto the already-tracked entity to avoid EF Core identity conflicts&#10;            _mapper.Map(dto, branch);&#10;&#10;            _unitOfWork.BranchRepository.Update(branch);&#10;            await _unitOfWork.CompleteAsync();&#10;            return _mapper.Map&lt;BranchDto&gt;(branch);&#10;    }&#10;&#10;    public async Task&lt;bool&gt; DeleteBranchAsync(int id)&#10;    {&#10;        _logger.LogInformation(&quot;Deleting branch with id {Id}&quot;, id);&#10;        var branch = await _unitOfWork.BranchRepository.GetById(id);&#10;        if (branch == null)&#10;        {&#10;            _logger.LogWarning(&quot;Branch with id {Id} not found&quot;, id);&#10;            throw new KeyNotFoundException($&quot;Branch with id {id} not found&quot;);&#10;        }&#10;        // delete the tracked entity instance directly to avoid creating a second instance with the same key&#10;        _unitOfWork.BranchRepository.Delete(branch);&#10;        await _unitOfWork.CompleteAsync();&#10;        return true;&#10;    }&#10;}" />
              <option name="updatedContent" value="using AutoMapper;&#10;using FintechCore.Application.Dtos.Setups;&#10;using FintechCore.Domain.Entities.Setups;&#10;using FintechCore.Domain.Interfaces;&#10;using Microsoft.Extensions.Logging;&#10;&#10;namespace FintechCore.Application.Services.Setups.branch;&#10;&#10;public class BranchService : IBranchService&#10;{&#10;    private readonly IUnitOfWork _unitOfWork;&#10;    private readonly ILogger&lt;BranchService&gt; _logger;&#10;    private readonly IMapper _mapper;&#10;&#10;    public BranchService(IUnitOfWork unitOfWork, ILogger&lt;BranchService&gt; logger, IMapper mapper)&#10;    {&#10;        _unitOfWork = unitOfWork;&#10;        _logger = logger;&#10;        _mapper = mapper;&#10;    }&#10;&#10;    public async  Task&lt;IEnumerable&lt;BranchDto&gt;&gt; GetAllBranchesAsync()&#10;    {&#10;        _logger.LogInformation(&quot;Getting all branches&quot;);&#10;        var branches = await _unitOfWork.BranchRepository.GetAll();&#10;        return _mapper.Map&lt;IEnumerable&lt;BranchDto&gt;&gt;(branches);&#10;    }&#10;&#10;    public async Task&lt;BranchDto&gt; GetBranchByIdAsync(int id)&#10;    {&#10;        _logger.LogInformation(&quot;Getting branch with id {Id}&quot;, id);&#10;        var branch = await _unitOfWork.BranchRepository.GetById(id);&#10;        if (branch == null)&#10;        {&#10;            _logger.LogWarning(&quot;Branch with id {Id} not found&quot;, id);&#10;            throw new KeyNotFoundException($&quot;Branch with id {id} not found&quot;);&#10;        }&#10;        return _mapper.Map&lt;BranchDto&gt;(branch);&#10;    }&#10;&#10;    public async Task&lt;BranchDto&gt; CreateBranchAsync(CreateBranchDto dto)&#10;    {&#10;        _logger.LogInformation(&quot;Creating a new branch&quot;);&#10;        var branch = _mapper.Map&lt;Branch&gt;(dto);&#10;        _unitOfWork.BranchRepository.Add(branch);&#10;        await _unitOfWork.CompleteAsync();&#10;        return _mapper.Map&lt;BranchDto&gt;(branch);&#10;    }&#10;&#10;    public async Task&lt;BranchDto&gt; UpdateBranchAsync(int id, UpdateBranchDto dto)&#10;    {&#10;        _logger.LogInformation(&quot;Updating branch with id {Id}&quot;, id);&#10;        var branch = await  _unitOfWork.BranchRepository.GetById(id);&#10;        if (branch == null)&#10;        {&#10;            _logger.LogWarning(&quot;Branch with id {Id} not found&quot;, id);&#10;            throw new KeyNotFoundException($&quot;Branch with id {id} not found&quot;);&#10;        }&#10;            // Map the DTO onto the already-tracked entity to avoid EF Core identity conflicts&#10;            _mapper.Map(dto, branch);&#10;&#10;            _unitOfWork.BranchRepository.Update(branch);&#10;            await _unitOfWork.CompleteAsync();&#10;            return _mapper.Map&lt;BranchDto&gt;(branch);&#10;    }&#10;&#10;    public async Task&lt;bool&gt; DeleteBranchAsync(int id)&#10;    {&#10;        _logger.LogInformation(&quot;Deleting branch with id {Id}&quot;, id);&#10;        var branch = await _unitOfWork.BranchRepository.GetById(id);&#10;        if (branch == null)&#10;        {&#10;            _logger.LogWarning(&quot;Branch with id {Id} not found&quot;, id);&#10;            throw new KeyNotFoundException($&quot;Branch with id {id} not found&quot;);&#10;        }&#10;        // delete the tracked entity instance directly to avoid creating a second instance with the same key&#10;        _unitOfWork.BranchRepository.Delete(branch);&#10;        await _unitOfWork.CompleteAsync();&#10;        return true;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/FintechCore.Application/Services/Setups/category/CategoryService.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/FintechCore.Application/Services/Setups/category/CategoryService.cs" />
              <option name="originalContent" value="using AutoMapper;&#10;using FintechCore.Application.Dtos.Setups;&#10;using FintechCore.Domain.Entities.Setups;&#10;using FintechCore.Domain.Interfaces;&#10;using Microsoft.Extensions.Logging;&#10;&#10;namespace FintechCore.Application.Services.Setups.category;&#10;&#10;public class CategoryService : ICategoryService&#10;{&#10;    private readonly IUnitOfWork _unitOfWork;&#10;    private readonly ILogger&lt;CategoryService&gt; _logger;&#10;    private readonly IMapper _mapper;&#10;&#10;    public CategoryService(IUnitOfWork unitOfWork, ILogger&lt;CategoryService&gt; logger, IMapper mapper)&#10;    {&#10;        _unitOfWork = unitOfWork;&#10;        _logger = logger;&#10;        _mapper = mapper;&#10;    }&#10;&#10;    public async Task&lt;IEnumerable&lt;CategoryDto&gt;&gt; GetAllCategoriesAsync()&#10;    {&#10;        _logger.LogInformation(&quot;Getting all categories&quot;);&#10;        var categories = await _unitOfWork.CategoryRepository.GetAll();&#10;        return _mapper.Map&lt;IEnumerable&lt;CategoryDto&gt;&gt;(categories);&#10;    }&#10;&#10;    public async Task&lt;CategoryDto&gt; GetCategoryByIdAsync(Guid id)&#10;    {&#10;        _logger.LogInformation(&quot;Getting category with id {Id}&quot;, id);&#10;        var category = await  _unitOfWork.CategoryRepository.GetById(id);&#10;        if (category == null)&#10;        {&#10;            _logger.LogWarning(&quot;Category with id {Id} not found&quot;, id);&#10;            throw new KeyNotFoundException($&quot;Category with id {id} not found&quot;);&#10;        }&#10;        return _mapper.Map&lt;CategoryDto&gt;(category);&#10;    }&#10;&#10;    public async Task&lt;CategoryDto&gt; CreateCategoryAsync(CreateCategoryDto dto)&#10;    {&#10;        _logger.LogInformation(&quot;Creating a new category&quot;);&#10;        var category = _mapper.Map&lt;Category&gt;(dto);&#10;        &#10;        category.CatId=Guid.NewGuid();&#10;        category.DateCreated= DateTime.UtcNow;&#10;        &#10;        _unitOfWork.CategoryRepository.Add(category);&#10;        await _unitOfWork.CompleteAsync();&#10;        return _mapper.Map&lt;CategoryDto&gt;(category);&#10;    }&#10;&#10;    public async Task&lt;CategoryDto&gt; UpdateCategoryAsync(Guid id, UpdateCategoryDto dto)&#10;    {&#10;        _logger.LogInformation(&quot;Updating category with id {Id}&quot;, id);&#10;        var category = await  _unitOfWork.CategoryRepository.GetById(id);&#10;        if (category == null)&#10;        {&#10;            _logger.LogWarning(&quot;Category with id {Id} not found&quot;, id);&#10;            throw new KeyNotFoundException($&quot;Category with id {id} not found&quot;);&#10;        }&#10;        _mapper.Map(dto, category);&#10;        &#10;        category.DateModified= DateTime.UtcNow;&#10;        &#10;        _unitOfWork.CategoryRepository.Update(category);&#10;        await _unitOfWork.CompleteAsync();&#10;        return _mapper.Map&lt;CategoryDto&gt;(category);&#10;    }&#10;&#10;    public async Task&lt;bool&gt; DeleteCategoryAsync(Guid id)&#10;    {&#10;        _logger.LogInformation(&quot;Deleting category with id {Id}&quot;, id);&#10;        var category = await  _unitOfWork.CategoryRepository.GetById(id);&#10;        if (category == null)&#10;        {&#10;            _logger.LogWarning(&quot;Category with id {Id} not found&quot;, id);&#10;            throw new KeyNotFoundException($&quot;Category with id {id} not found&quot;);&#10;        }&#10;        &#10;        // Delete the tracked entity instance directly to avoid creating a second instance with the same key&#10;        _unitOfWork.CategoryRepository.Delete(category);&#10;        await _unitOfWork.CompleteAsync();&#10;        return true;&#10;    }&#10;}" />
              <option name="updatedContent" value="using AutoMapper;&#10;using FintechCore.Application.Dtos.Setups;&#10;using FintechCore.Domain.Entities.Setups;&#10;using FintechCore.Domain.Interfaces;&#10;using Microsoft.Extensions.Logging;&#10;&#10;namespace FintechCore.Application.Services.Setups.category;&#10;&#10;public class CategoryService : ICategoryService&#10;{&#10;    private readonly IUnitOfWork _unitOfWork;&#10;    private readonly ILogger&lt;CategoryService&gt; _logger;&#10;    private readonly IMapper _mapper;&#10;&#10;    public CategoryService(IUnitOfWork unitOfWork, ILogger&lt;CategoryService&gt; logger, IMapper mapper)&#10;    {&#10;        _unitOfWork = unitOfWork;&#10;        _logger = logger;&#10;        _mapper = mapper;&#10;    }&#10;&#10;    public async Task&lt;IEnumerable&lt;CategoryDto&gt;&gt; GetAllCategoriesAsync()&#10;    {&#10;        _logger.LogInformation(&quot;Getting all categories&quot;);&#10;        var categories = await _unitOfWork.CategoryRepository.GetAll();&#10;        return _mapper.Map&lt;IEnumerable&lt;CategoryDto&gt;&gt;(categories);&#10;    }&#10;&#10;    public async Task&lt;CategoryDto&gt; GetCategoryByIdAsync(Guid id)&#10;    {&#10;        _logger.LogInformation(&quot;Getting category with id {Id}&quot;, id);&#10;        var category = await  _unitOfWork.CategoryRepository.GetById(id);&#10;        if (category == null)&#10;        {&#10;            _logger.LogWarning(&quot;Category with id {Id} not found&quot;, id);&#10;            throw new KeyNotFoundException($&quot;Category with id {id} not found&quot;);&#10;        }&#10;        return _mapper.Map&lt;CategoryDto&gt;(category);&#10;    }&#10;&#10;    public async Task&lt;CategoryDto&gt; CreateCategoryAsync(CreateCategoryDto dto)&#10;    {&#10;        _logger.LogInformation(&quot;Creating a new category&quot;);&#10;        var category = _mapper.Map&lt;Category&gt;(dto);&#10;        &#10;        category.CatId=Guid.NewGuid();&#10;        category.DateCreated= DateTime.UtcNow;&#10;        &#10;        _unitOfWork.CategoryRepository.Add(category);&#10;        await _unitOfWork.CompleteAsync();&#10;        return _mapper.Map&lt;CategoryDto&gt;(category);&#10;    }&#10;&#10;    public async Task&lt;CategoryDto&gt; UpdateCategoryAsync(Guid id, UpdateCategoryDto dto)&#10;    {&#10;        _logger.LogInformation(&quot;Updating category with id {Id}&quot;, id);&#10;        var category = await  _unitOfWork.CategoryRepository.GetById(id);&#10;        if (category == null)&#10;        {&#10;            _logger.LogWarning(&quot;Category with id {Id} not found&quot;, id);&#10;            throw new KeyNotFoundException($&quot;Category with id {id} not found&quot;);&#10;        }&#10;        _mapper.Map(dto, category);&#10;        &#10;        category.DateModified= DateTime.UtcNow;&#10;        &#10;        _unitOfWork.CategoryRepository.Update(category);&#10;        await _unitOfWork.CompleteAsync();&#10;        return _mapper.Map&lt;CategoryDto&gt;(category);&#10;    }&#10;&#10;    public async Task&lt;bool&gt; DeleteCategoryAsync(Guid id)&#10;    {&#10;        _logger.LogInformation(&quot;Deleting category with id {Id}&quot;, id);&#10;        var category = await  _unitOfWork.CategoryRepository.GetById(id);&#10;        if (category == null)&#10;        {&#10;            _logger.LogWarning(&quot;Category with id {Id} not found&quot;, id);&#10;            throw new KeyNotFoundException($&quot;Category with id {id} not found&quot;);&#10;        }&#10;        &#10;        // Delete the tracked entity instance directly to avoid creating a second instance with the same key&#10;        _unitOfWork.CategoryRepository.Delete(category);&#10;        await _unitOfWork.CompleteAsync();&#10;        return true;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/FintechCore.WebAPI/Controllers/Setups/CategoriesController.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/FintechCore.WebAPI/Controllers/Setups/CategoriesController.cs" />
              <option name="originalContent" value="using FintechCore.Application.Dtos.Setups;&#10;using FintechCore.Application.Services.Setups.category;&#10;using Microsoft.AspNetCore.Mvc;&#10;&#10;namespace FintechCore.WebAPI.Controllers.Setups;&#10;&#10;[ApiController]&#10;[Route(&quot;api/v1/[controller]&quot;)]&#10;public class CategoriesController : ControllerBase&#10;{&#10;    private readonly ICategoryService _categoryService;&#10;&#10;    public CategoriesController(ICategoryService categoryService)&#10;    {&#10;        _categoryService = categoryService;&#10;    }&#10;    &#10;    // get all categories&#10;    [HttpGet]&#10;    public async Task&lt;IActionResult&gt; GetAllCategories()&#10;    {&#10;        var categories = await _categoryService.GetAllCategoriesAsync();&#10;        return Ok(categories);&#10;    }&#10;    &#10;    // get category by id&#10;    [HttpGet(&quot;{id}&quot;)]&#10;    public async Task&lt;IActionResult&gt; GetCategoryById(Guid id)&#10;    {&#10;        var category = await _categoryService.GetCategoryByIdAsync(id);&#10;        return Ok(category);&#10;    }&#10;    &#10;    // create category&#10;    [HttpPost]&#10;    public async Task&lt;IActionResult&gt; CreateCategory([FromBody] CreateCategoryDto dto)&#10;    {&#10;        var category = await _categoryService.CreateCategoryAsync(dto);&#10;        return CreatedAtAction(nameof(GetCategoryById), new { id = category.CatId }, category);&#10;    }&#10;    &#10;    // update category&#10;    [HttpPut(&quot;{id}&quot;)]&#10;    public async Task&lt;IActionResult&gt; UpdateCategory(Guid id, [FromBody] UpdateCategoryDto dto)&#10;    {&#10;        var category = await _categoryService.UpdateCategoryAsync(id, dto);&#10;        return Ok(category);&#10;    }&#10;    &#10;    // delete category&#10;    [HttpDelete(&quot;{id}&quot;)]&#10;    public async Task&lt;IActionResult&gt; DeleteCategory(Guid id)&#10;    {&#10;        await _categoryService.DeleteCategoryAsync(id);&#10;        return NoContent();&#10;    }&#10;&#10;}" />
              <option name="updatedContent" value="using FintechCore.Application.Dtos.Setups;&#10;using FintechCore.Application.Services.Setups.category;&#10;using Microsoft.AspNetCore.Mvc;&#10;&#10;namespace FintechCore.WebAPI.Controllers.Setups;&#10;&#10;[ApiController]&#10;[Route(&quot;api/v1/[controller]&quot;)]&#10;public class CategoriesController : ControllerBase&#10;{&#10;    private readonly ICategoryService _categoryService;&#10;&#10;    public CategoriesController(ICategoryService categoryService)&#10;    {&#10;        _categoryService = categoryService;&#10;    }&#10;    &#10;    // get all categories&#10;    [HttpGet]&#10;    public async Task&lt;IActionResult&gt; GetAllCategories()&#10;    {&#10;        var categories = await _categoryService.GetAllCategoriesAsync();&#10;        return Ok(categories);&#10;    }&#10;    &#10;    // get category by id&#10;    [HttpGet(&quot;{id}&quot;)]&#10;    public async Task&lt;IActionResult&gt; GetCategoryById(Guid id)&#10;    {&#10;        var category = await _categoryService.GetCategoryByIdAsync(id);&#10;        return Ok(category);&#10;    }&#10;    &#10;    // create category&#10;    [HttpPost]&#10;    public async Task&lt;IActionResult&gt; CreateCategory([FromBody] CreateCategoryDto dto)&#10;    {&#10;        var category = await _categoryService.CreateCategoryAsync(dto);&#10;        return CreatedAtAction(nameof(GetCategoryById), new { id = category.CatId }, category);&#10;    }&#10;    &#10;    // update category&#10;    [HttpPut(&quot;{id}&quot;)]&#10;    public async Task&lt;IActionResult&gt; UpdateCategory(Guid id, [FromBody] UpdateCategoryDto dto)&#10;    {&#10;        var category = await _categoryService.UpdateCategoryAsync(id, dto);&#10;        return Ok(category);&#10;    }&#10;    &#10;    // delete category&#10;    [HttpDelete(&quot;{id}&quot;)]&#10;    public async Task&lt;IActionResult&gt; DeleteCategory(Guid id)&#10;    {&#10;        await _categoryService.DeleteCategoryAsync(id);&#10;        return NoContent();&#10;    }&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>